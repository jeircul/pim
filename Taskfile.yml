version: "3"

vars:
  BINARY_NAME: pim
  VERSION:
    sh: git describe --tags --always --dirty 2>/dev/null || echo "dev"
  LDFLAGS: "-s -w -X main.Version={{.VERSION}}"
  INSTALL_DIR: ~/.local/bin

tasks:
  default:
    desc: Show available tasks
    cmds:
      - task --list
    silent: true

  # Development tasks
  dev:
    desc: Run in development mode (build and execute)
    deps: [build]
    cmds:
      - ./{{.BINARY_NAME}} {{.CLI_ARGS}}

  fmt:
    desc: Format all Go code
    cmds:
      - go fmt ./...

  tidy:
    desc: Tidy dependencies (go.mod/go.sum)
    cmds:
      - go mod tidy

  # Testing tasks
  test:
    desc: Run all tests with race detection
    cmds:
      - go test -v -race -cover ./...

  test:unit:
    desc: Run unit tests only (pkg + internal)
    cmds:
      - go test -v -cover ./pkg/... ./internal/...

  test:coverage:
    desc: Generate HTML coverage report
    cmds:
      - go test -coverprofile=coverage.out ./...
      - go tool cover -html=coverage.out -o coverage.html
      - echo "Coverage report generated at coverage.html"

  # Build tasks
  build:
    desc: Build for current platform
    cmds:
      - go build -ldflags "{{.LDFLAGS}}" -o {{.BINARY_NAME}} .

  build:all:
    desc: Build for all platforms
    deps:
      - build:linux
      - build:linux-arm
      - build:macos
      - build:macos-intel
      - build:windows

  build:linux:
    desc: Build for Linux AMD64
    cmds:
      - mkdir -p dist
      - GOOS=linux GOARCH=amd64 CGO_ENABLED=0 go build -ldflags "{{.LDFLAGS}}" -trimpath -o dist/{{.BINARY_NAME}}-linux-amd64 .

  build:linux-arm:
    desc: Build for Linux ARM64
    cmds:
      - mkdir -p dist
      - GOOS=linux GOARCH=arm64 CGO_ENABLED=0 go build -ldflags "{{.LDFLAGS}}" -trimpath -o dist/{{.BINARY_NAME}}-linux-arm64 .

  build:macos:
    desc: Build for macOS ARM64 (Apple Silicon)
    cmds:
      - mkdir -p dist
      - GOOS=darwin GOARCH=arm64 CGO_ENABLED=0 go build -ldflags "{{.LDFLAGS}}" -trimpath -o dist/{{.BINARY_NAME}}-darwin-arm64 .

  build:macos-intel:
    desc: Build for macOS AMD64 (Intel)
    cmds:
      - mkdir -p dist
      - GOOS=darwin GOARCH=amd64 CGO_ENABLED=0 go build -ldflags "{{.LDFLAGS}}" -trimpath -o dist/{{.BINARY_NAME}}-darwin-amd64 .

  build:windows:
    desc: Build for Windows AMD64
    cmds:
      - mkdir -p dist
      - GOOS=windows GOARCH=amd64 CGO_ENABLED=0 go build -ldflags "{{.LDFLAGS}}" -trimpath -o dist/{{.BINARY_NAME}}-windows-amd64.exe .

  # Installation tasks
  install:
    desc: Install to ~/.local/bin (user-local)
    cmds:
      - mkdir -p {{.INSTALL_DIR}}
      - go build -ldflags "{{.LDFLAGS}}" -o {{.INSTALL_DIR}}/{{.BINARY_NAME}} .
      - echo "✓ Installed {{.BINARY_NAME}} to {{.INSTALL_DIR}}"

  install:global:
    desc: Install to GOPATH/bin (global)
    cmds:
      - go install -ldflags "{{.LDFLAGS}}" .
      - echo "✓ Installed {{.BINARY_NAME}} to GOPATH/bin"

  uninstall:
    desc: Remove from ~/.local/bin
    cmds:
      - rm -f {{.INSTALL_DIR}}/{{.BINARY_NAME}}
      - echo "✓ Removed {{.BINARY_NAME}} from {{.INSTALL_DIR}}"

  # Maintenance tasks
  maintain:
    desc: Run all maintenance tasks (fmt, tidy, test)
    cmds:
      - task: fmt
      - task: tidy
      - task: test

  clean:
    desc: Clean all build artifacts and coverage files
    cmds:
      - rm -f {{.BINARY_NAME}}
      - rm -rf dist/
      - rm -f coverage.out coverage.html
      - echo "✓ Cleaned build artifacts"

  # CI/Release tasks
  ci:
    desc: Run CI checks (fmt, tidy, test, build)
    cmds:
      - task: fmt
      - task: tidy
      - task: test
      - task: build

  release:
    desc: Prepare release (ci + build:all)
    cmds:
      - task: ci
      - task: build:all
      - echo "✓ Release artifacts ready in dist/"
